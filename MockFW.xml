<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2.1 (Build 801U)" ts="2020-05-20 18:06:21">
<Class name="MockFW.MockBase">
<Super>%RegisteredObject,MockFW.Utils,%SYSTEM.Event</Super>
<TimeChanged>65519,65011.07627</TimeChanged>
<TimeCreated>65495,51903.340181</TimeCreated>

<Method name="SaveMethod">
<Description>
Save method of Mock to the global if does not already exist</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName,methodName:%String,params,response,restMethod:%String="",code=200,delay=0,force=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[


	if (params="") {
		set params= "NONE"
	}

	if (restMethod'="") && (response=""){
		set response= "NONE"
	}

	if (mockName="") || (methodName="") || (response="") {
		write !, "ERROR: One of the compulsory parameters is missing."
		quit '$$$OK
	}


	if ($ISOBJECT(params)) {
		set params = params.%ToJSON()
	}
	
	if ($ISOBJECT(response)) {
		set response = response.%ToJSON()
	}
	
	if (restMethod="") { // save local method
		if 'force {
			if ($DATA(^MockMat(mockName, methodName, params))) {
					write !, "ERROR: The record with same parameters already exists."
					quit '$$$OK
			} 
			set tSC = ..GetMockedResponse(mockName, methodName, params, .res)
			if (tSC=1) {
				write !, "ERROR: The record with same parameters already exists."
				quit '$$$OK
			}
		}
		
		set ^MockMat(mockName, methodName, params) = response

		write "Method ", methodName, " was succesfully saved to mock ", mockName, "!", !
		
	} else { //save endpoint
		
		if 'force {
			if ($DATA(^MockMat(mockName, methodName, restMethod, params))) {
					write !, "ERROR: The record with same parameters already exists."
					quit '$$$OK
			} 
			set tSC = ..GetMockedResponseREST(mockName, methodName, restMethod, params, .res) 
			if (tSC=1) {
				write !, "ERROR: The record with same parameters already exists."
				quit '$$$OK
			}
		}

		try {
			set check = {}.%FromJSON(params)
		} catch errobj {
			if params'="NONE" {
				write "WARNING: The body of the request is not valid JSON...  "
			}
		}

		set ^MockMat(mockName, methodName, restMethod, params) = response
		set ^MockMat(mockName, methodName, restMethod, params, "code") = code
		set ^MockMat(mockName, methodName, restMethod, params, "delay") = delay

		write "Method ", restMethod, " with url ", methodName, " was succesfully saved to mock ", mockName, "!", ! 


	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="MethodCalled">
<Description>
Return right data when specific method is called</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,methodName:%String,Args...</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set response = {}
	set args = ..TransformArgsToList(Args...)
	
	set params = args.GetAt(1)
	
	if ($ISOBJECT(params)) {
		set params = params.%ToJSON()
	}
	

	set sc = ..GetMockedResponse(class, methodName, params, .response)
	
	return response
]]></Implementation>
</Method>

<Method name="GetMockedResponse">
<Description>
Retrieve right data from global if the method with specific parameters is mocked</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,methodName:%String,params,*response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response=""
	
	if (params="") {
		set params = "NONE"
	}

	set key = $Order(^MockMat(mockName, methodName,""))
 	while (key '= "") {
     	set sc = ..Compare(key, params)
     	if sc=1 {
     		set response = ^MockMat(mockName, methodName, key)
     		return $$$OK
     	}
     	set key = $Order(^MockMat(mockName, methodName, key)) // next subscript
 	}
 	if $Data(^MockMat(mockName, methodName, "DEFAULT")) {
 		set response = ^MockMat(mockName, methodName, "DEFAULT")
 		quit $$$OK
 	}
 	quit '$$$OK
]]></Implementation>
</Method>

<Method name="GetMockedResponseREST">
<Description>
Retrieve right data from global if the method with specific parameters is mocked. REST version.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,methodName:%String,method:%String,body,*response,*code</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set response=""

	if ((body.%ToJSON())="{}") {
		set body = "NONE"
	}

	set key = $Order(^MockMat(mockName, methodName, method,""))
 	while (key '= "") {
     	set sc = ..Compare(key, body)
     	if sc=1 {
     		set response = ^MockMat(mockName, methodName, method, key)
			set code = ^MockMat(mockName, methodName, method, key, "code")
			set delay = ^MockMat(mockName, methodName, method, key, "delay")
			hang delay
     		return $$$OK
     	}
     	set key = $Order(^MockMat(mockName, methodName, method,key)) // next subscript
 	}
 	if $Data(^MockMat(mockName, methodName, method, "DEFAULT")) {
 		set response = ^MockMat(mockName, methodName, method, "DEFAULT")
		set code = ^MockMat(mockName, methodName, method, "DEFAULT", "code")
		set delay = ^MockMat(mockName, methodName, method, "DEFAULT", "delay")
		hang delay
 		quit $$$OK
 	}
	
 	quit '$$$OK
]]></Implementation>
</Method>
</Class>


<Class name="MockFW.MockManager">
<Super>%RegisteredObject,MockFW.Utils</Super>
<TimeChanged>65519,64968.684034</TimeChanged>
<TimeCreated>65495,51883.297734</TimeCreated>

<Method name="CreateMock">
<Description>
Creates new mock class if does not exist already. 
Generates class definition in 'MockFW.Mocks' to be possible calling methods on this class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set fullClassName = "MockFW.Mocks."_className
	
	If (##class(%Dictionary.CompiledClass).%ExistsId(fullClassName)) {
		w "Mock with this name already exists!"
		quit '$$$OK
	}
	
	set classDef=##class(%Dictionary.ClassDefinition).%New()
	set classDef.Name=fullClassName
	set classDef.ProcedureBlock=1
	set classDef.Super = "MockFW.MockBase"
	
	set methodDef = ##class(%Dictionary.MethodDefinition).%New()
	set methodDef.Name = "SaveMethod"	
	set methodDef.ClassMethod = "1"
	set methodDef.ReturnType = "%Status"
	set methodDef.FormalSpec="methodName:%String,params,return,restMethod:%String="""",code=200,delay=0,force=0"	
	do methodDef.Implementation.WriteLine($$$TAB_" set mockName = $PIECE($CLASSNAME(),""."",3) ")
	do methodDef.Implementation.WriteLine($$$TAB_" do ##super(mockName, methodName, params, return, restMethod, code, delay, force)")
	do classDef.Methods.Insert(methodDef)
	
	set methodDef = ##class(%Dictionary.MethodDefinition).%New()
	set methodDef.Name = "%DispatchClassMethod"	
	set methodDef.ClassMethod = "1"
	set methodDef.FormalSpec="Class:%String,methodName:%String,Args..."
	do methodDef.Implementation.WriteLine($$$TAB_" set mockName = $PIECE(Class,""."",3) ")
	do methodDef.Implementation.WriteLine($$$TAB_" quit ##class(MockFW.MockBase).MethodCalled(mockName, methodName, Args...)")
	do classDef.Methods.Insert(methodDef)
	
	
	set methodDef = ##class(%Dictionary.MethodDefinition).%New()
	set methodDef.Name = "%DispatchMethod"	
	set methodDef.FormalSpec="methodName:%String,Args..."
	do methodDef.Implementation.WriteLine($$$TAB_" set mockName = $PIECE($CLASSNAME(),""."",3) ")
	do methodDef.Implementation.WriteLine($$$TAB_" quit ##class(MockFW.MockBase).MethodCalled(mockName, methodName, Args...)")
	do classDef.Methods.Insert(methodDef)
	
	do classDef.%Save()
   	quit ##class(%SYSTEM.OBJ).Compile(fullClassName)
]]></Implementation>
</Method>

<Method name="SaveMethod">
<Description>
Save method of the certain mock to the global if the method with same parameters does not already exist
To overwrite existing record adjust parametr force to 1</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,methodName:%String,params,response,restMethod:%String="",code:%Integer=200,delay=0,force=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(MockFW.MockBase).SaveMethod(mockName, methodName, params, response, restMethod, code, delay, force)
]]></Implementation>
</Method>

<Method name="SaveMethodsFromCSV">
<Description>
Import mock and mocks data from .csv file
Import proccess from the second line with  'format 
Name of the Mock; Method(endpoint); parameters; Response; Rest method; Return code, delay, force'</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filePath:%String</FormalSpec>
<Implementation><![CDATA[
	set saved = 0
	set count = 0
   	set stream=##class(%Stream.FileCharacter).%New()
   	set sc=stream.LinkToFile(filePath)
   	do stream.Rewind()
   	while 'stream.AtEnd {
		set line=stream.ReadLine()
     	set mockName = $PIECE(line,";",1)
     	set methodName = $PIECE(line,";",2)
     	set params = $PIECE(line,";",3)
     	set response = $PIECE(line,";",4)
     	set restMethod = $PIECE(line,";",5)
     	set code = $PIECE(line,";",6)
     	set delay = $PIECE(line,";",7)
     	set force = $PIECE(line,";",8)
     
     	//Convert to objects because of way how we are saving
     	set params =  ..CutExtraQuotes(params)
     	set response =  ..CutExtraQuotes(response)

     	if mockName'= "Name of the Mock" { // We do not want to take first line
		 	set count = count + 1
     		set sc = ##class(MockFW.MockBase).SaveMethod(mockName, methodName, params, response, restMethod, code, delay, force)                  
			if sc=$$$OK {
				set saved = saved + 1
			}
		}
   	}
	write !, "It was saved ", saved, " methods from ", count, !
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportMock">
<Description>
Is used when closing REST API into Docker
Export Mock class and Mock data as a two files (.xml a .gof)
dirPath = directory where you have folder with Iris docker + /durable/src
mockName = e.g. MyMock</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,dirPath:%String,inContainer:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if inContainer {
		set dirPath = "/opt/mockfw/export/"
	} else {
		set dirPath = dirPath_"\"
	}

	do ..ExportMockData(mockName, dirPath)

	set className = "MockFW.Mocks."_mockName
	set exist=##class(%Dictionary.CompiledClass).%ExistsId(className)
	if 'exist {
		write "The class definition of mock "_mockName_" does not exist. Only global exported (might be empty)."
		quit '$$$OK
	}
	do ..ExportMockClass(mockName, dirPath)

	quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportMockData">
<Description>
Auxiliary method, exports Mocks data</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,dirPath:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set global = "MockMat("_mockName
	set filePath = dirPath_mockName_"Global.gof"
	quit ##class(%Library.Global).Export(,global,filePath)
]]></Implementation>
</Method>

<Method name="ExportMockClass">
<Description>
Auxiliary method, exports Mock class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,dirPath:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set fullClassName = "MockFW.Mocks."_mockName_".cls"
	set filePath = dirPath_mockName_"MockClass.xml"
	quit $system.OBJ.Export(fullClassName, filePath)
]]></Implementation>
</Method>

<Method name="GetAllMocks">
<Description>
Return all mocks as a %ListOfDataTypes and also write the list</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#dim listMocks = ##class(%ListOfDataTypes).%New()
	set key = $Order(^MockMat(""))
 	while (key '= "") {
		 do listMocks.Insert(key)
     	s key = $Order(^MockMat(key)) // next subscript
 	}
	zwrite listMocks 
	quit listMocks
]]></Implementation>
</Method>

<Method name="GetAllMethods">
<Description>
Return all Mock methods as a %ListOfDataTypes and also write the list</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String</FormalSpec>
<Implementation><![CDATA[
	#dim listMethods = ##class(%ListOfDataTypes).%New()
	set key = $Order(^MockMat(mockName,""))
 	while (key '= "") {
		 do listMethods.Insert(key)
     	s key = $Order(^MockMat(mockName,key)) // next subscript
 	}
	zwrite listMethods
	quit listMethods
]]></Implementation>
</Method>

<Method name="DeleteMethod">
<Description>
Delete specific method from specific mock (All records with different parameters)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,methodName:%String</FormalSpec>
<Implementation><![CDATA[
	kill ^MockMat(mockName, methodName)
	write "The method ", methodName, " from mock ", mockName, " no longer exist.", !
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteMethodWithParametr">
<Description>
Delete specific method from specific mock with specific parameters</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,methodName:%String,params,restMethod:%String=""</FormalSpec>
<Implementation><![CDATA[
	if ($ISOBJECT(params)) {
		set params = params.%ToJSON()
	}

	if restMethod="" {
		kill ^MockMat(mockName, methodName, params)
	} else {
		kill ^MockMat(mockName, methodName, restMethod, params)
	}

	write "The method ", methodName, " from mock ", mockName, "with parameters ", params, " no longer exist.", !
]]></Implementation>
</Method>

<Method name="DeleteMock">
<Description>
Delete Mock class definition and also clean global from this Mock (Mocks data)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String</FormalSpec>
<Implementation><![CDATA[
	Kill ^MockMat(mockName)
	quit ##class(%SYSTEM.OBJ).Delete("MockFW.Mocks."_mockName)
	write "The mock ", mockName, "no longer exists",!
]]></Implementation>
</Method>

<Method name="CleanAll">
<Description>
Delete all of the records and data</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Kill ^MockMat
	quit ##class(%SYSTEM.OBJ).DeletePackage("MockFW.Mocks")
]]></Implementation>
</Method>

<Method name="InitMockForTest">
<Description>
Initialize mock name for testing purpose (parse mock name from instance of full class name)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>serviceInstance</FormalSpec>
<Implementation><![CDATA[	quit $PIECE($CLASSNAME(serviceInstance),".",3)
]]></Implementation>
</Method>

<Method name="GenerateDocumentation">
<Description>
This method generates documentation for the certain mock
Format of the documentation is XML for simple transformation to DocBook via XMLmind or other tools</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName:%String,dirPath:%String,inContainer:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if inContainer {
		set filePath = "/opt/mockfw/export/"
	}
	set filePath = filePath_mockName_"Doc.xml"

	write "Generating documentation of the mock ", mockName, " to specified path",!

	set file=##class(%File).%New(filePath)
	do file.Open("WSN")
	do file.WriteLine("<?xml version=""1.0"" encoding=""UTF-8""?>")
	do file.WriteLine("<!DOCTYPE book PUBLIC ""-//OASIS//DTD DocBook XML V4.5//EN""")
	do file.WriteLine("""http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"">")
	do file.WriteLine("<book>")
	do file.WriteLine($$$TAB_"<bookinfo>")
	do file.WriteLine(..Tabs(2)_"<title>"_mockName_" - Mock documentation</title>")
	do file.WriteLine(..Tabs(2)_"<author>")
	do file.WriteLine(..Tabs(3)_"<firstname>"_$USERNAME_"</firstname>")
	do file.WriteLine(..Tabs(2)_"</author>")
	do file.WriteLine(..Tabs(2)_"<pubdate>"_$PIECE($ZDATETIME($ZTIMESTAMP,4,1,2)," ", 1)_"</pubdate>")
	do file.WriteLine($$$TAB_"</bookinfo>")
	
	
	do file.WriteLine($$$TAB_"<chapter>")
	do file.WriteLine(..Tabs(2)_"<title>MockFW.Mocks."_mockName_"</title>")
	

	// first local mocked methods
	set local = "false"
	
	#dim listMethods = ##class(%ListOfDataTypes).%New()
	set key = $Order(^MockMat(mockName,""))
 	while (key '= "") {
		do listMethods.Insert(key)
     	s key = $Order(^MockMat(mockName,key)) // next subscript
 	}
	set listMethodswithREST = ##class(%ListOfDataTypes).%New()
	for i=1:1:listMethods.Count() {
    	set method = listMethods.GetAt(i)
    	set first = "true"
    	set firstREST = "true"
    	
    	set key = $Order(^MockMat(mockName, method, ""))
 		while (key '= "") {
		 	if (key '= "GET") &&  (key '= "POST") && (key '= "PUT") && (key '= "DELETE") {
			 	if local = "false" {
				 	set local = "true"
			 		do file.WriteLine(..Tabs(2)_"<section>")
					do file.WriteLine(..Tabs(3)_"<title>Local mocked methods</title>")
					do file.WriteLine(..Tabs(3)_"<itemizedlist mark=""opencircle"">")
			 	}
			 	if first="true" {
				 	set first="false"
		    		do file.WriteLine(..Tabs(4)_"<listitem>")
    				do file.WriteLine(..Tabs(5)_"<para>"_method_"()</para>")
    				do file.WriteLine(..Tabs(5)_"<table frame=""all"">")
    				do file.WriteLine(..Tabs(6)_"<tgroup align=""left"" cols=""2"">")
    				do file.WriteLine(..Tabs(7)_"<colspec colname=""c1""/>")
    				do file.WriteLine(..Tabs(7)_"<colspec colname=""c2""/>")
    				do file.WriteLine(..Tabs(7)_"<thead>")
    				do file.WriteLine(..Tabs(8)_"<row>")
    				do file.WriteLine(..Tabs(9)_"<entry>Parameters</entry>")
    				do file.WriteLine(..Tabs(9)_"<entry>Response</entry>")
    				do file.WriteLine(..Tabs(8)_"</row>")
    				do file.WriteLine(..Tabs(7)_"</thead>")
    				do file.WriteLine(..Tabs(7)_"<tbody>")	 		
			 	}
			 	
			 	do file.WriteLine(..Tabs(8)_"<row>")
			 	do file.WriteLine(..Tabs(9)_"<entry>"_key_"</entry>")
			 	set response = ^MockMat(mockName, method, key)
			 	do file.WriteLine(..Tabs(9)_"<entry>"_response_"</entry>")
			 	do file.WriteLine(..Tabs(8)_"</row>")
			 		
		 	} else {
			 	if firstREST="true" {
				 	set firstRest="false"
		 			if listMethodswithREST.Find(method) = "" {
		 				do listMethodswithREST.Insert(method)
					}
			 	}
		 	}
		 	s key = $Order(^MockMat(mockName, method, key)) // next subscript
 		}
    	
    	if first="false" {
    		do file.WriteLine(..Tabs(7)_"</tbody>")
    		do file.WriteLine(..Tabs(6)_"</tgroup>")
    		do file.WriteLine(..Tabs(5)_"</table>")
    		do file.WriteLine(..Tabs(4)_"</listitem>")
    	}
 	} 
	if local = "true" {
		do file.WriteLine(..Tabs(3)_"</itemizedlist>")
		do file.WriteLine(..Tabs(2)_"</section>")
	}
	
	// second REST mocked methods
	set port = "9092"
	set url = "http://localhost:"_port_"/api/mockfw/"_mockName_"/"
	
	do file.WriteLine(..Tabs(2)_"<section>")
	do file.WriteLine(..Tabs(3)_"<title>REST mocked methods</title>")
	do file.WriteLine(..Tabs(3)_"<itemizedlist mark=""opencircle"">")
	
	
	for i=1:1:listMethodswithREST.Count() {
    	set method = listMethodswithREST.GetAt(i)
    	
    	do file.WriteLine(..Tabs(4)_"<listitem>")
    	do file.WriteLine(..Tabs(5)_"<para>"_url_method_"</para>")
    	do file.WriteLine(..Tabs(5)_"<table frame=""all"">")
    	do file.WriteLine(..Tabs(6)_"<tgroup align=""left"" cols=""5"">")
    	do file.WriteLine(..Tabs(7)_"<colspec colname=""c1"" colwidth=""1*""/>")
    	do file.WriteLine(..Tabs(7)_"<colspec colname=""c2"" colwidth=""3*""/>")
    	do file.WriteLine(..Tabs(7)_"<colspec colname=""c3"" colwidth=""3*""/>")
    	do file.WriteLine(..Tabs(7)_"<colspec colname=""c4"" colwidth=""1*""/>")
    	do file.WriteLine(..Tabs(7)_"<colspec colname=""c5"" colwidth=""1*""/>")
    	do file.WriteLine(..Tabs(7)_"<thead>")
    	do file.WriteLine(..Tabs(8)_"<row>")
    	do file.WriteLine(..Tabs(9)_"<entry>HTTP method</entry>")
    	do file.WriteLine(..Tabs(9)_"<entry>Body</entry>")
    	do file.WriteLine(..Tabs(9)_"<entry>Response</entry>")
    	do file.WriteLine(..Tabs(9)_"<entry>Return code</entry>")
    	do file.WriteLine(..Tabs(9)_"<entry>Delay(s)</entry>")
    	do file.WriteLine(..Tabs(8)_"</row>")
    	do file.WriteLine(..Tabs(7)_"</thead>")
    	do file.WriteLine(..Tabs(7)_"<tbody>")
    	
    	set restmethod = $Order(^MockMat(mockName, method, ""))
 		while (restmethod '= "") {
	 		
			set param = $Order(^MockMat(mockName, method, restmethod, ""))
			while (param '= "") {
				do file.WriteLine(..Tabs(8)_"<row>")
				do file.WriteLine(..Tabs(9)_"<entry>"_restmethod_"</entry>")
				if param '= "GET" {
				do file.WriteLine(..Tabs(9)_"<entry>"_param_"</entry>")
				} else {
				do file.WriteLine(..Tabs(9)_"<entry></entry>")
				}			
				set response = ^MockMat(mockName, method, restmethod, param)
				do file.WriteLine(..Tabs(9)_"<entry>"_response_"</entry>")
				set code = ^MockMat(mockName, method, restmethod, param, "code")
				do file.WriteLine(..Tabs(9)_"<entry>"_code_"</entry>")
				set delay = ^MockMat(mockName, method, restmethod, param, "delay")
				do file.WriteLine(..Tabs(9)_"<entry>"_delay_"</entry>")
				do file.WriteLine(..Tabs(8)_"</row>")
			
				s param = $Order(^MockMat(mockName, method, restmethod, param)) // next params
			}
			s restmethod = $Order(^MockMat(mockName, method, restmethod)) // next restmethod
			 	
 		}
    	do file.WriteLine(..Tabs(7)_"</tbody>")
    	do file.WriteLine(..Tabs(6)_"</tgroup>")
    	do file.WriteLine(..Tabs(5)_"</table>")
    	do file.WriteLine(..Tabs(4)_"</listitem>")
 	} 
	do file.WriteLine(..Tabs(3)_"</itemizedlist>")
	do file.WriteLine(..Tabs(2)_"</section>")


	do file.WriteLine($$$TAB_"</chapter>")
	do file.WriteLine("</book>")
	

	return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="MockFW.Mocks.MyMock">
<ProcedureBlock>1</ProcedureBlock>
<Super>MockFW.MockBase</Super>
<TimeChanged>65507,39133.024586</TimeChanged>
<TimeCreated>65507,39133.02306</TimeCreated>

<Method name="%DispatchClassMethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>Class:%String,methodName:%String,Args...</FormalSpec>
<Implementation><![CDATA[
  set mockName = $PIECE(Class,".",3) 
  quit ##class(MockFW.MockBase).MethodCalled(mockName, methodName, Args...)
]]></Implementation>
</Method>

<Method name="%DispatchMethod">
<FormalSpec>methodName:%String,Args...</FormalSpec>
<Implementation><![CDATA[
  set mockName = $PIECE($CLASSNAME(),".",3) 
  quit ##class(MockFW.MockBase).MethodCalled(mockName, methodName, Args...)
]]></Implementation>
</Method>

<Method name="SaveMethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>methodName:%String,params,return,restMethod:%String="",code=200,delay=0,force=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set mockName = $PIECE($CLASSNAME(),".",3) 
  do ##super(mockName, methodName, params, return, restMethod, code, delay, force)
]]></Implementation>
</Method>
</Class>


<Class name="MockFW.REST.Base">
<Super>%CSP.REST</Super>
<TimeChanged>65495,52085.183109</TimeChanged>
<TimeCreated>65495,52063.926513</TimeCreated>

<Parameter name="CHARSET">
<Default>utf-8</Default>
</Parameter>

<Parameter name="CONTENTTYPE">
<Default>application/json</Default>
</Parameter>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<Parameter name="PAGESIZE">
<Type>INTEGER</Type>
<Default>20</Default>
</Parameter>

<Method name="OnPreDispatch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pUrl:%String,pMethod:%String,&pContinue:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  Set tSC = $$$OK
  try {
    
    // Set the return type according to the Accept type in the request. Default is application/json.
    if ('..AcceptsContentType(..#CONTENTTYPEJSON)) {
      set tSC = ..ReportHttpStatusCode(..#HTTP406NOTACCEPTABLE), pContinue=0
      quit 
        } else {   
      // This always returns json
      set %response.ContentType=..#CONTENTTYPEJSON
        }
        
        
        // read request object into %DynamicObject format
    if ((pMethod'="POST") && (pMethod'="PUT")) || (%request.Content="") {
      set %request.Content = {}
    } else {
      if '$isobject(%request.Content) {
        set tContent = %request.Content
      } else {
        set tContent = ""
        while '%request.Content.AtEnd {
          set tContent = tContent_%request.Content.Read()
        }
      }
      if (tContent="") {
        set %request.Content = {}
      } else {
        set tContent = $zconvert(tContent, "I", "UTF8")
        set %request.Content = ##class(%Library.DynamicObject).%FromJSON(tContent)
      }
    }
        
  } catch ex {
    set tSC = ex.AsStatus()
  }
  quit ##class(%iKnow.REST.Base).%ErrorHandler(tSC, .pContinue)
]]></Implementation>
</Method>
</Class>


<Class name="MockFW.REST.Utils">
<Super>%iKnow.REST.Utils,%CSP.REST,MockFW.Utils</Super>
<TimeChanged>65514,35425.708158</TimeChanged>
<TimeCreated>65495,51935.38924</TimeCreated>

<Method name="ReadRequestToObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>*obj,setIfNone="",convertToUtf8=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set SC=$$$OK
	try{
		if %request.Content'=""{
			set obj=%request.Content
		} else {
			return $System.Status.Error(5001, "No request data provided.")
		}
	} catch exc {
		set SC=exc.AsStatus()
	}
	
	quit SC
]]></Implementation>
</Method>

<Method name="WriteResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>response,code,SC:%Status,encode:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	quit:response="" SC
	set:response="NONE" response=""
	quit:SC'=$$$OK SC
	set %response.Status = code

	set stream=##class(%Stream.GlobalCharacter).%New()

	try {
		set response={}.%FromJSON(response)
	} catch {
		set res = {}
		do res.%Set("Response",response)
		set response = res
	}

	do response.%ToJSON(stream)
	do stream.Rewind()
		while stream.AtEnd=0{
		write:encode=0 stream.Read()
		write:encode=1 $zconvert(stream.Read(),"I","UTF8")
	}
	quit SC
]]></Implementation>
</Method>

<Method name="WriteErrorResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName,methodName,SC:%Status,encode:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set %response.Status = 404
	set stream=##class(%Stream.GlobalCharacter).%New()
	set response = {}
	set error = "Metoda s URL "_methodName_" pro mock "_mockName_" s parametry nenalezena."
	do response.%Set("Error",error)
	
	do response.%ToJSON(stream)
	do stream.Rewind()
		while stream.AtEnd=0{
		write:encode=0 stream.Read()
		write:encode=1 $zconvert(stream.Read(),"I","UTF8")
	}
	quit SC
]]></Implementation>
</Method>

<Method name="GetQuery">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set query = "?"
	set first = "true"
	set key = $ORDER(%request.Data(""))
	while (key '= "") {
		if first'="true" {
			set query = query_"&"

		} else {
			set first = "false" 
		}
		set val = $GET(%request.Data(key,1))
		set query = query_key_"="_val
		set key = $ORDER(%request.Data(key))
	}
	if query = "?" {
		return ""
	}
	return query
]]></Implementation>
</Method>
</Class>


<Class name="MockFW.REST">
<Super>MockFW.REST.Base,MockFW.REST.Utils,%CSP.REST</Super>
<TimeChanged>65514,35529.968025</TimeChanged>
<TimeCreated>65495,51884.883851</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/ping" Method="GET" Call="Test" Cors="false" />
<Route Url="/:mockName/(.+)" Method="POST" Call="Dispatch" Cors="false" />
<Route Url="/:mockName/(.+)" Method="GET" Call="Dispatch" Cors="false" />
<Route Url="/:mockName/(.+)" Method="PUT" Call="Dispatch" Cors="false" />
<Route Url="/:mockName/(.+)" Method="DELETE" Call="Dispatch" Cors="false" />
</Routes>
]]></Data>
</XData>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	w pong
	q $$$OK
]]></Implementation>
</Method>

<Method name="Dispatch">
<Description>
Dispatch method which is called for every endpoint. Distribute the request to the MockBase class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mockName,methodName</FormalSpec>
<Implementation><![CDATA[
	set SC=$$$OK
	set response={}
	set code =""
	set obj=""
	set methodName = methodName_..GetQuery()
	try{
		$$$ThrowOnError(..ReadRequestToObject(.obj))
		set method = %request.Method
		set tSC = ##class(MockFW.MockBase).GetMockedResponseREST(mockName, methodName, method, obj, .response, .code)
		if (response="") || (tSC=0) {
			    return ..WriteErrorResponse(mockName,methodName,tSC)
		}
		return ..WriteResponse(response, code, tSC)
	}catch exc{
		set tSC=exc.AsStatus()
		return ..WriteErrorResponse(mockName,methodName,tSC)
	}
	
	quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="MockFW.Utils">
<Super>%RegisteredObject</Super>
<TimeChanged>65514,35391.779456</TimeChanged>
<TimeCreated>65495,51824.45642</TimeCreated>

<Method name="Tabs">
<Description>
Method, which add multiple $$$TAB to line of generated code</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count</FormalSpec>
<Implementation><![CDATA[
	set res = ""
	for i=1:1:count {
		set res = res_$$$TAB
	}
	return res
]]></Implementation>
</Method>

<Method name="CutExtraQuotes">
<Description>
Auxiliary method for retrieving from .csv.
Cut extra double quotes to corect saving</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>string:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set n = $Length(string)
	set result = ""
	For i=1:1:n {
		Set piece = $Extract(string,i, i)
		if piece = """" {
			if $Extract(string,i+1, i+1) = """" {
				set result = result_piece
			}
		} else {
			set result = result_piece	
		}
	}
	
	return result
]]></Implementation>
</Method>

<Method name="Compare">
<Description>
Compare two strings (potentionally objects)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>savedObject,params</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	if savedObject = params {
		return 1
	}

	try { // try transform string to object
		if ('$ISOBJECT(savedObject)) {
			set savedObject={}.%FromJSON(savedObject)
		}
		if ('$ISOBJECT(params)) {
			set params={}.%FromJSON(params)
		}
		return ..CompareObjects(savedObject, params)

	} catch errobj { // one of string can not be tranform to object
		return 0
	}
]]></Implementation>
</Method>

<Method name="CompareObjects">
<Description>
Method compare two dynamic objects</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>savedObject,params</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		if ((..CountAtributes(savedObject)) '= (..CountAtributes(params))) {
			quit 0
		}

		set iterator = params.%GetIterator()
    	while iterator.%GetNext(.key, .value) {
			if ($ISOBJECT(value)) {
				set valueS = savedObject.%Get(key)
				if (('$ISOBJECT(valueS)) || ($CLASSNAME(value)'=$CLASSNAME(valueS))) {
					return 0
				}

				if ($CLASSNAME(value)="%Library.DynamicObject") { // compare nested objects
					if ('..CompareObjects(value, valueS)) {
						return 0
					}
				} else {
				 	if ('..CompareArrays(value, valueS)) { // compare nested arrays
						return 0
					}
				}
			} else {
    			if (savedObject.%Get(key) '= value) {
    				return 0
    			}
			}
   
		}
	quit 1
]]></Implementation>
</Method>

<Method name="CompareArrays">
<Description>
Method compare two dynamic arrays</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>saved,params</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (saved.%Size() '= params.%Size()) {
		return 0
	}

	set iterator = params.%GetIterator()

	while iterator.%GetNext(.key, .value) {
		set iteratorS = saved.%GetIterator()
		set found = "false"
		while iteratorS.%GetNext(.keyS, .valueS) {
			if ($ISOBJECT(value) && '$ISOBJECT(valueS)) || ('$ISOBJECT(value) && $ISOBJECT(valueS)) {
				continue
			}

			if ($ISOBJECT(value)) {
				if ($CLASSNAME(value)="%Library.DynamicObject") { // compare nested objects
					if (..CompareObjects(value, valueS)) {
						set found = "true"
						quit
					}
				} else {
				 	if (..CompareArrays(value, valueS)) { // compare nested arrays
						set found = "true"
						quit
					}
				}
			} else {
				if value=valueS {
					set found = "true"
					quit
				}
			}	
		}
		if found="false" {
			return 0
		}
	}
	quit 1
]]></Implementation>
</Method>

<Method name="CanConvertToJSON">
<Description>
Return '1' if the string can be transformed to the object, else '0'
Use regex syntax. Work right only for 2-3 layers of json object </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>json</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set jsonWithoutSpaces = $ZSTRIP(json,"*W")
	set item = "(\""[:alnum:]+\"")"
	set itemValue = "((\""[:alnum:]+\"")|([:digit:]+))"
	set element = item_"\:"_itemValue
	set object = "\{("_element_"\,)*"_element_"\}"
	set array = "((\[((("_element_"\,)*"_element_")|(("_object _"\,)*"_object_")|(("_itemValue _"\,)*"_itemValue_"))\])|(\[\]))"

	set objectInObject = item_"\:"_object
	set arrayInObject = item_"\:"_array

	set regex = "\{((("_element_")|("_objectInObject_")|("_arrayInObject_"))\,)*(("_element_")|("_objectInObject_")|("_arrayInObject_"))\}"
	
	return $match(jsonWithoutSpaces, regex)
]]></Implementation>
</Method>

<Method name="CountAtributes">
<Description>
Auxiliary method. Count the atributes of object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim count As %Integer = 0 
	set iterator = obj.%GetIterator()
    
    while iterator.%GetNext(.key, .value) {
    	set count = count + 1
    }
    
    return count
]]></Implementation>
</Method>

<Method name="TransformArgsToList">
<Description>
Transfrom arguments to the list as %ListOfDataTypes</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>args...</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
   // Create a %ListOfDataTypes even though it may contain objects.
   #dim listArgs = ##class(%ListOfDataTypes).%New()
   #dim i AS %Integer
   for i = 1 : 1 : $get(args, 0)
   {
      do listArgs.Insert($get(args(i)))
   }
   
   quit listArgs
]]></Implementation>
</Method>
</Class>


</Export>
